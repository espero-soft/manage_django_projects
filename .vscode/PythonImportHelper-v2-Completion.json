[
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.contrib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib",
        "description": "django.contrib",
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PostForm",
        "importPath": "blog.forms.PostForm",
        "description": "blog.forms.PostForm",
        "isExtraImport": true,
        "detail": "blog.forms.PostForm",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "generate_model",
        "importPath": "model_generator",
        "description": "model_generator",
        "isExtraImport": true,
        "detail": "model_generator",
        "documentation": {}
    },
    {
        "label": "generate_templates",
        "importPath": "view_generator",
        "description": "view_generator",
        "isExtraImport": true,
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "generate_view",
        "importPath": "view_generator",
        "description": "view_generator",
        "isExtraImport": true,
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "generate_form",
        "importPath": "form_generator",
        "description": "form_generator",
        "isExtraImport": true,
        "detail": "form_generator",
        "documentation": {}
    },
    {
        "label": "parse_model_fields",
        "importPath": "form_generator",
        "description": "form_generator",
        "isExtraImport": true,
        "detail": "form_generator",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "questionary",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "questionary",
        "description": "questionary",
        "detail": "questionary",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "inflect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inflect",
        "description": "inflect",
        "detail": "inflect",
        "documentation": {}
    },
    {
        "label": "PostForm",
        "kind": 6,
        "importPath": "blog.forms.es_admin.PostForm",
        "description": "blog.forms.es_admin.PostForm",
        "peekOfCode": "class PostForm(forms.ModelForm):\n    class Meta:\n        model = Post\n        fields = ('title', 'slug', 'content', 'author', 'category', 'is_published', 'tags', 'image', 'created_at', 'updated_at')\n        widgets = {\n            'title' : forms.forms.TextInput(attrs={'class': 'form-control custom-text-input'}),\n            'slug' : forms.forms.TextInput(attrs={'class': 'form-control custom-slug-input'}),\n            'content' : forms.forms.Textarea(attrs={'class': 'form-control custom-textarea'}),\n            'is_published' : forms.forms.CheckboxInput(attrs={'class': 'form-control custom-checkbox'}),\n            'image' : forms.forms.ClearableFileInput(attrs={'class': 'form-control custom-image-input'}),",
        "detail": "blog.forms.es_admin.PostForm",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "blog.models.Category",
        "description": "blog.models.Category",
        "peekOfCode": "class Category(models.Model):\n    title = models.CharField(null=True)\n    description = models.CharField(null=True)\n    content = models.CharField(null=True)",
        "detail": "blog.models.Category",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "blog.models.Post",
        "description": "blog.models.Post",
        "peekOfCode": "class Post(models.Model):\n    title = models.CharField(max_length=60)\n    slug = models.SlugField(max_length=255)\n    content = models.TextField()\n    # OneToMany , ManyToOne\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    # OneToMany , ManyToOne\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    is_published = models.BooleanField(default=False)\n    tags = models.ManyToManyField(Tag)",
        "detail": "blog.models.Post",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "blog.models.Tag",
        "description": "blog.models.Tag",
        "peekOfCode": "class Tag(models.Model):\n    title = models.CharField(null=True)\n    description = models.CharField(null=True)\n    content = models.CharField(null=True)",
        "detail": "blog.models.Tag",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "blog.views.es_admin.PostView",
        "description": "blog.views.es_admin.PostView",
        "peekOfCode": "def index(request):\n    posts_list = Post.objects.all()\n    paginator = Paginator(posts_list, 8)\n    page = request.GET.get('page', 1)\n    try:\n        posts = paginator.page(page)\n    except PageNotAnInteger:\n        posts = paginator.page(1)\n    except EmptyPage:\n        posts = paginator.page(paginator.num_pages)",
        "detail": "blog.views.es_admin.PostView",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "blog.views.es_admin.PostView",
        "description": "blog.views.es_admin.PostView",
        "peekOfCode": "def show(request, id):\n    post = get_object_or_404(Post, id=id)\n    return render(request, 'blog/posts/post_show.html', {'post': post})\ndef create(request):\n    if request.method == 'POST':\n        form = PostForm(request.POST, request.FILES)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Post has been saved !')\n            return redirect('post_index')",
        "detail": "blog.views.es_admin.PostView",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "blog.views.es_admin.PostView",
        "description": "blog.views.es_admin.PostView",
        "peekOfCode": "def create(request):\n    if request.method == 'POST':\n        form = PostForm(request.POST, request.FILES)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Post has been saved !')\n            return redirect('post_index')\n    else:\n        form = PostForm()\n    return render(request, 'blog/posts/post_new.html', {'form': form})",
        "detail": "blog.views.es_admin.PostView",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "blog.views.es_admin.PostView",
        "description": "blog.views.es_admin.PostView",
        "peekOfCode": "def update(request, id):\n    post = get_object_or_404(Post, id=id)\n    if request.method == 'POST':\n        if request.POST.get('_method') == 'PUT':\n            form = PostForm(request.POST, request.FILES, instance=post)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'Post has been updated !')\n                return redirect('post_index')\n        else:",
        "detail": "blog.views.es_admin.PostView",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "blog.views.es_admin.PostView",
        "description": "blog.views.es_admin.PostView",
        "peekOfCode": "def delete(request, id):\n    post = get_object_or_404(Post, id=id)\n    if request.method == 'POST':\n        if request.POST.get('_method') == 'DELETE':\n            post.delete()\n            messages.success(request, 'Post has been deleted !')\n    return redirect('post_index')",
        "detail": "blog.views.es_admin.PostView",
        "documentation": {}
    },
    {
        "label": "make_entity",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def make_entity(args):\n    print(f\"Executing make:entity command for app: {args.app_name} and model: {args.model_name}.\")\n    # generate_entity()\n    generate_model(app_name=args.app_name, model_name=args.model_name)\n    generate_view(app_name=args.app_name, model_name=args.model_name)\n    generate_templates(model_name=args.model_name, app_name=args.app_name)\ndef make_form(args):\n    print(f\"Executing make:form command for app: {args.app_name} and model: {args.model_name}\")\n    generate_form(app_name=args.app_name, model_name=args.model_name)\ndef make_view(args):",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "make_form",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def make_form(args):\n    print(f\"Executing make:form command for app: {args.app_name} and model: {args.model_name}\")\n    generate_form(app_name=args.app_name, model_name=args.model_name)\ndef make_view(args):\n    print(f\"Executing make:model command for app: {args.app_name} and model: {args.model_name}\")\n    generate_view(app_name=args.app_name, model_name=args.model_name)\n    generate_templates(model_name=args.model_name, app_name=args.app_name)\ndef make_model(args):\n    print(f\"Executing make:model command for app: {args.app_name} and model: {args.model_name}\")\n    generate_model(app_name=args.app_name, model_name=args.model_name)",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "make_view",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def make_view(args):\n    print(f\"Executing make:model command for app: {args.app_name} and model: {args.model_name}\")\n    generate_view(app_name=args.app_name, model_name=args.model_name)\n    generate_templates(model_name=args.model_name, app_name=args.app_name)\ndef make_model(args):\n    print(f\"Executing make:model command for app: {args.app_name} and model: {args.model_name}\")\n    generate_model(app_name=args.app_name, model_name=args.model_name)\ndef make_entity_crud(args):\n    print(f\"Executing make:entity:crud command for app: {args.app_name} and model: {args.model_name}.\")\nif __name__ == \"__main__\":",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "make_model",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def make_model(args):\n    print(f\"Executing make:model command for app: {args.app_name} and model: {args.model_name}\")\n    generate_model(app_name=args.app_name, model_name=args.model_name)\ndef make_entity_crud(args):\n    print(f\"Executing make:entity:crud command for app: {args.app_name} and model: {args.model_name}.\")\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Custom CLI for performing tasks\")\n    subparsers = parser.add_subparsers()\n    entity_parser = subparsers.add_parser(\"make:entity\", help=\"Create an entity\")\n    entity_parser.add_argument(\"app_name\", help=\"Name of the app\")",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "make_entity_crud",
        "kind": 2,
        "importPath": "cli",
        "description": "cli",
        "peekOfCode": "def make_entity_crud(args):\n    print(f\"Executing make:entity:crud command for app: {args.app_name} and model: {args.model_name}.\")\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Custom CLI for performing tasks\")\n    subparsers = parser.add_subparsers()\n    entity_parser = subparsers.add_parser(\"make:entity\", help=\"Create an entity\")\n    entity_parser.add_argument(\"app_name\", help=\"Name of the app\")\n    entity_parser.add_argument(\"model_name\", help=\"Name of the model\")\n    entity_parser.set_defaults(func=make_entity)\n    form_parser = subparsers.add_parser(\"make:form\", help=\"Create a form\")",
        "detail": "cli",
        "documentation": {}
    },
    {
        "label": "parse_model_fields",
        "kind": 2,
        "importPath": "form_generator",
        "description": "form_generator",
        "peekOfCode": "def parse_model_fields(file_path):\n    field_pattern = re.compile(r'^\\s*(\\w+)\\s*=\\s*models\\.(\\w+)\\(', re.MULTILINE)\n    fields = {}\n    with open(file_path, 'r') as file:\n        content = file.read()\n        matches = field_pattern.finditer(content)\n        for match in matches:\n            field_name = match.group(1)\n            field_type = match.group(2)\n            fields[field_name] = field_type",
        "detail": "form_generator",
        "documentation": {}
    },
    {
        "label": "generate_form",
        "kind": 2,
        "importPath": "form_generator",
        "description": "form_generator",
        "peekOfCode": "def generate_form(app_name, model_name):\n    # Chemin du dossier des formulaires dans l'application spécifiée\n    form_folder = Path(f\"{app_name}/forms\")\n    if not form_folder.exists():\n        form_folder.mkdir(parents=True)\n    # Nom du fichier pour le formulaire\n    form_filename = form_folder / f\"{model_name}Form.py\"\n    if form_filename.exists():\n        user_input = input(f\"Le fichier '{form_filename}' existe déjà. Voulez-vous l'écraser ? (O/n): \")\n        if user_input.lower() != 'o':",
        "detail": "form_generator",
        "documentation": {}
    },
    {
        "label": "field_widgets",
        "kind": 5,
        "importPath": "form_generator",
        "description": "form_generator",
        "peekOfCode": "field_widgets = {\n    'DateField': \"forms.DateInput(attrs={'class': 'form-control datepicker'})\",\n    'DateTimeField': \"forms.DateTimeInput(attrs={'class': 'form-control datetimepicker'})\",\n    'CharField': \"forms.TextInput(attrs={'class': 'form-control custom-text-input'})\",\n    'EmailField': \"forms.EmailInput(attrs={'class': 'form-control custom-email-input'})\",\n    'BooleanField': \"forms.CheckboxInput(attrs={'class': 'form-control custom-checkbox'})\",\n    'IntegerField': \"forms.NumberInput(attrs={'class': 'form-control custom-number-input'})\",\n    'FloatField': \"forms.NumberInput(attrs={'class': 'form-control custom-float-input'})\",\n    'URLField': \"forms.URLInput(attrs={'class': 'form-control custom-url-input'})\",\n    'FileField': \"forms.ClearableFileInput(attrs={'class': 'form-control custom-file-input'})\",",
        "detail": "form_generator",
        "documentation": {}
    },
    {
        "label": "is_valid_model_name",
        "kind": 2,
        "importPath": "model_generator",
        "description": "model_generator",
        "peekOfCode": "def is_valid_model_name(name):\n    return bool(re.match(r'^[a-zA-Z][_a-zA-Z0-9]*$', name))\ndef parse_model_fields(file_path):\n    field_pattern = re.compile(r'^\\s*(\\w+)\\s*=\\s*models\\.(\\w+)\\(', re.MULTILINE)\n    fields = {}\n    with open(file_path, 'r') as file:\n        content = file.read()\n        matches = field_pattern.finditer(content)\n        for match in matches:\n            field_name = match.group(1)",
        "detail": "model_generator",
        "documentation": {}
    },
    {
        "label": "parse_model_fields",
        "kind": 2,
        "importPath": "model_generator",
        "description": "model_generator",
        "peekOfCode": "def parse_model_fields(file_path):\n    field_pattern = re.compile(r'^\\s*(\\w+)\\s*=\\s*models\\.(\\w+)\\(', re.MULTILINE)\n    fields = {}\n    with open(file_path, 'r') as file:\n        content = file.read()\n        matches = field_pattern.finditer(content)\n        for match in matches:\n            field_name = match.group(1)\n            field_type = match.group(2)\n            fields[field_name] = field_type",
        "detail": "model_generator",
        "documentation": {}
    },
    {
        "label": "generate_model",
        "kind": 2,
        "importPath": "model_generator",
        "description": "model_generator",
        "peekOfCode": "def generate_model(app_name, model_name = False):\n    # model_name = \"\"\n    fields = []\n    if not model_name:\n        while True:\n            model_name = questionary.text(\"Nom du modèle :\").ask()\n            if not model_name:\n                print(\"Le nom du modèle ne peut pas être vide. Veuillez saisir un nom valide.\")\n            elif not is_valid_model_name(model_name):\n                print(\"Le nom du modèle n'est pas valide. Veuillez utiliser un nom de classe Python valide.\")",
        "detail": "model_generator",
        "documentation": {}
    },
    {
        "label": "field_choices",
        "kind": 5,
        "importPath": "model_generator",
        "description": "model_generator",
        "peekOfCode": "field_choices = {\n    \"string\": 'models.CharField',\n    \"integer\": 'models.IntegerField',\n    \"text\": 'models.TextField',\n    \"boolean\": \"models.BooleanField\",\n    \"date\": \"models.DateField\",\n    \"datetime\": \"models.DateTimeField\",\n    \"email\": \"models.EmailField\",\n    \"float\": \"models.FloatField\",\n    \"decimal\": \"models.DecimalField\",",
        "detail": "model_generator",
        "documentation": {}
    },
    {
        "label": "get_plural",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def get_plural(word):\n    p = inflect.engine()\n    plural_word = p.plural(word)\n    return plural_word\ndef get_lower_plural(word):\n    p = inflect.engine()\n    plural_word = p.plural(word.lower())\n    return plural_word\ndef copy_file(source_file, destination_file):\n    try:",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "get_lower_plural",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def get_lower_plural(word):\n    p = inflect.engine()\n    plural_word = p.plural(word.lower())\n    return plural_word\ndef copy_file(source_file, destination_file):\n    try:\n        with open(source_file, 'r') as source:\n            with open(destination_file, 'w') as destination:\n                content = source.read()\n                destination.write(content)",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "copy_file",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def copy_file(source_file, destination_file):\n    try:\n        with open(source_file, 'r') as source:\n            with open(destination_file, 'w') as destination:\n                content = source.read()\n                destination.write(content)\n        print(f\"File copied from '{source_file}' to '{destination_file}' successfully.\")\n    except FileNotFoundError:\n        print(\"File not found. Please provide valid file names.\")\ndef create_view_paginator(model_name, app_name):",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "create_view_paginator",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def create_view_paginator(model_name, app_name):\n    template_folder = Path(f\"{app_name}/templates/{app_name}/{get_plural(model_name.lower())}\")\n    model_filename = f\"{app_name}/models/{model_name}.py\"\n    model_fields = parse_model_fields(model_filename)\n    index_content = '''\n                    {% if datas.has_other_pages %}\n                        <nav aria-label=\"Page navigation example\">\n                            <ul class=\"pagination\">\n                                {% if datas.has_previous %}\n                                    <li class=\"page-item\">",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "create_view_index",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def create_view_index(model_name, app_name):\n    template_folder = Path(f\"{app_name}/templates/{app_name}/{get_plural(model_name.lower())}\")\n    model_filename = f\"{app_name}/models/{model_name}.py\"\n    model_fields = parse_model_fields(model_filename)\n    table_header = \"\"\n    for key, value in model_fields.items():\n        table_header += f\"    <th scope='col'>{key}</td>\\n\"\n    table_content = \"\"\n    for key, value in model_fields.items():\n        table_content += \"    <td scope='col'>{{ \"+ model_name.lower() +\".\"+key + \"}}</td>\\n\"",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "create_view_show",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def create_view_show(model_name, app_name):\n    template_folder = Path(f\"{app_name}/templates/{app_name}/{get_plural(model_name.lower())}\")\n    model_filename = f\"{app_name}/models/{model_name}.py\"\n    model_fields = parse_model_fields(model_filename)\n    table_content = \"\"\n    for key, value in model_fields.items():\n        table_content += \"    <tr>\\n\"\n        table_content += \"        <td scope='col'> \"+key.capitalize() + \": </td>\\n\"\n        table_content += \"        <td scope='col'>{{ \"+ model_name.lower() +\".\"+key + \"}}</td>\"\n        table_content += \"    </tr>\"",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "create_view_edit",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def create_view_edit(model_name, app_name):\n    template_folder = Path(f\"{app_name}/templates/{app_name}/{get_plural(model_name.lower())}\")\n    form_link = f\"{model_name.lower()}_form.html\"\n    # model_filename = f\"{app_name}/models/{model_name}.py\"\n    # model_fields = parse_model_fields(model_filename)\n    index_content = '''{% extends \"''' + app_name + '''/admin.html\" %}\n    {% load static %}\n    {% block content %}\n    {% if messages %}\n        {% for message in messages %}",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "create_view_create",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def create_view_create(model_name, app_name):\n    template_folder = Path(f\"{app_name}/templates/{app_name}/{get_plural(model_name.lower())}\")\n    form_link = f\"{model_name.lower()}_form.html\"\n    # model_filename = f\"{app_name}/models/{model_name}.py\"\n    # model_fields = parse_model_fields(model_filename)\n    index_content = '''{% extends \"''' + app_name + '''/admin.html\" %}\n    {% load static %}\n    {% block content %}\n    {% if messages %}\n        {% for message in messages %}",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "create_view_form",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def create_view_form(model_name, app_name):\n    template_folder = Path(f\"{app_name}/templates/{app_name}/{get_plural(model_name.lower())}\")\n    model_filename = f\"{app_name}/models/{model_name}.py\"\n    model_fields = parse_model_fields(model_filename)\n    form_content = \"\"\n    for key, value in model_fields.items():\n        form_content += \"    <div class='form-group'>\\n\"\n        form_content += f\"        <label for='{key}'> { key.capitalize() }: </label>\\n\"\n        form_content += \"        {{ form.\"+key+\" }}\\n\"\n        form_content += '''",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "generate_templates",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def generate_templates(model_name, app_name):\n    template_folder = Path(f\"{app_name}/templates/{app_name}/{get_plural(model_name.lower())}\")\n    if not template_folder.exists():\n        template_folder.mkdir(parents=True)\n    # paginator template\n    create_view_paginator(model_name, app_name)\n    # Index template\n    create_view_index(model_name, app_name)\n    # Detail template\n    create_view_show(model_name, app_name)",
        "detail": "view_generator",
        "documentation": {}
    },
    {
        "label": "generate_view",
        "kind": 2,
        "importPath": "view_generator",
        "description": "view_generator",
        "peekOfCode": "def generate_view(app_name, model_name):\n    # Chemin du dossier des vues dans l'application spécifiée\n    views_folder = Path(f\"{app_name}/views\")\n    if not views_folder.exists():\n        views_folder.mkdir(parents=True)\n    # Nom du fichier pour la vue\n    view_filename = views_folder / f\"{model_name}View.py\"\n    if view_filename.exists():\n        user_input = input(f\"Le fichier '{view_filename}' existe déjà. Voulez-vous l'écraser ? (O/n): \")\n        if user_input.lower() != 'o':",
        "detail": "view_generator",
        "documentation": {}
    }
]